<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Historical Warriors RPG</title>
    <style>
        body {
            margin: 0;
            padding: 20px;
            font-family: 'Courier New', monospace;
            background: linear-gradient(135deg, #2c1810, #4a2c1a);
            color: #f4e4c1;
            min-height: 100vh;
        }
        
        .game-container {
            max-width: 1200px;
            margin: 0 auto;
            display: grid;
            grid-template-columns: 1fr 300px;
            gap: 20px;
        }
        
        .main-view {
            background: rgba(0,0,0,0.3);
            border: 2px solid #8b4513;
            border-radius: 10px;
            padding: 20px;
            min-height: 500px;
        }
        
        .sidebar {
            background: rgba(0,0,0,0.4);
            border: 2px solid #8b4513;
            border-radius: 10px;
            padding: 15px;
        }
        
        .warrior-card {
            background: rgba(139, 69, 19, 0.2);
            border: 1px solid #8b4513;
            border-radius: 8px;
            padding: 10px;
            margin: 10px 0;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .warrior-card:hover {
            background: rgba(139, 69, 19, 0.4);
            transform: translateY(-2px);
        }
        
        .warrior-card.recruited {
            border-color: #228b22;
            background: rgba(34, 139, 34, 0.2);
        }
        
        .battle-area {
            display: none;
            text-align: center;
        }
        
        .battle-area.active {
            display: block;
        }
        
        .fighter-display {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin: 20px 0;
        }
        
        .fighter {
            width: 150px;
            text-align: center;
        }
        
        .health-bar {
            width: 100%;
            height: 20px;
            background: #333;
            border-radius: 10px;
            overflow: hidden;
            margin: 10px 0;
        }
        
        .health-fill {
            height: 100%;
            background: linear-gradient(90deg, #ff4444, #ffaa44);
            transition: width 0.3s ease;
        }
        
        .action-buttons {
            display: flex;
            gap: 10px;
            justify-content: center;
            margin: 20px 0;
        }
        
        .btn {
            padding: 10px 20px;
            background: #8b4513;
            color: #f4e4c1;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-family: inherit;
            transition: background 0.3s ease;
        }
        
        .btn:hover {
            background: #a0522d;
        }
        
        .btn:disabled {
            background: #555;
            cursor: not-allowed;
        }
        
        .team-roster {
            max-height: 300px;
            overflow-y: auto;
        }
        
        .stat-bar {
            display: flex;
            justify-content: space-between;
            margin: 5px 0;
            font-size: 12px;
        }
        
        .world-map {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 15px;
            margin: 20px 0;
        }
        
        .location {
            background: rgba(139, 69, 19, 0.3);
            border: 2px solid #8b4513;
            border-radius: 8px;
            padding: 15px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .location:hover {
            background: rgba(139, 69, 19, 0.5);
            transform: scale(1.05);
        }
        
        .location.completed {
            border-color: #228b22;
            background: rgba(34, 139, 34, 0.3);
        }
        
        .nav-buttons {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
        }
        
        .view {
            display: none;
        }
        
        .view.active {
            display: block;
        }
        
        .log {
            background: rgba(0,0,0,0.5);
            border: 1px solid #8b4513;
            border-radius: 5px;
            padding: 10px;
            height: 100px;
            overflow-y: auto;
            font-size: 12px;
            margin: 10px 0;
        }
    </style>
</head>
<body>
    <div class="game-container">
        <div class="main-view">
            <div class="nav-buttons">
                <button class="btn" onclick="showView('world')">World Map</button>
                <button class="btn" onclick="showView('team')">Team</button>
                <button class="btn" onclick="showView('training')">Training</button>
            </div>
            
            <!-- World Map View -->
            <div id="worldView" class="view active">
                <h2>Historical Battlegrounds</h2>
                <div class="world-map" id="worldMap"></div>
            </div>
            
            <!-- Team Management View -->
            <div id="teamView" class="view">
                <h2>Your Warriors</h2>
                <div id="teamRoster"></div>
            </div>
            
            <!-- Training View -->
            <div id="trainingView" class="view">
                <h2>Training Grounds</h2>
                <div id="trainingArea">
                    <p>Select a warrior from your team to train them.</p>
                    <div id="trainingInterface"></div>
                </div>
            </div>
            
            <!-- Battle View -->
            <div id="battleView" class="view">
                <h2 id="battleTitle">Battle Arena</h2>
                <div class="fighter-display">
                    <div class="fighter">
                        <h3 id="playerName">You</h3>
                        <div class="health-bar">
                            <div class="health-fill" id="playerHealth" style="width: 100%"></div>
                        </div>
                        <div id="playerStats"></div>
                    </div>
                    <div class="fighter">
                        <h3 id="enemyName">Enemy</h3>
                        <div class="health-bar">
                            <div class="health-fill" id="enemyHealth" style="width: 100%"></div>
                        </div>
                        <div id="enemyStats"></div>
                    </div>
                </div>
                <div class="action-buttons">
                    <button class="btn" onclick="attack()">Attack</button>
                    <button class="btn" onclick="defend()">Defend</button>
                    <button class="btn" onclick="useSkill()">Special Skill</button>
                </div>
                <div class="log" id="battleLog"></div>
                <button class="btn" onclick="showView('world')" id="returnBtn" style="display: none;">Return to World</button>
            </div>
        </div>
        
        <div class="sidebar">
            <h3>Player Status</h3>
            <div id="playerInfo">
                <div class="stat-bar">
                    <span>Level:</span>
                    <span id="playerLevel">1</span>
                </div>
                <div class="stat-bar">
                    <span>Gold:</span>
                    <span id="playerGold">100</span>
                </div>
                <div class="stat-bar">
                    <span>Team Size:</span>
                    <span id="teamSize">0/6</span>
                </div>
            </div>
            
            <h3>Available Warriors</h3>
            <div class="team-roster" id="availableWarriors"></div>
        </div>
    </div>

    <script>
        // Game State Management
        const gameState = {
            player: {
                level: 1,
                gold: 100,
                health: 100,
                maxHealth: 100,
                attack: 15,
                defense: 10,
                experience: 0
            },
            team: [],
            currentBattle: null,
            unlockedLocations: ['ancient_rome'],
            currentView: 'world'
        };

        // Warrior Database
        const warriorDatabase = {
            gladiator_maximus: {
                name: "Gladiator Maximus",
                era: "Ancient Rome",
                location: "ancient_rome",
                health: 120,
                attack: 18,
                defense: 12,
                skill: "Shield Bash",
                description: "A legendary gladiator from the Colosseum",
                recruited: false,
                level: 1,
                experience: 0
            },
            miyamoto_musashi: {
                name: "Miyamoto Musashi",
                era: "Feudal Japan",
                location: "feudal_japan",
                health: 100,
                attack: 22,
                defense: 8,
                skill: "Dual Wielding",
                description: "Master swordsman of the two-sword style",
                recruited: false,
                level: 1,
                experience: 0
            },
            william_wallace: {
                name: "William Wallace",
                era: "Medieval Scotland",
                location: "medieval_scotland",
                health: 140,
                attack: 16,
                defense: 14,
                skill: "Battle Cry",
                description: "Scottish warrior fighting for freedom",
                recruited: false,
                level: 1,
                experience: 0
            },
            joan_of_arc: {
                name: "Joan of Arc",
                era: "Medieval France",
                location: "medieval_france",
                health: 90,
                attack: 20,
                defense: 10,
                skill: "Divine Inspiration",
                description: "The Maid of Orléans, blessed warrior",
                recruited: false,
                level: 1,
                experience: 0
            },
            alexander_great: {
                name: "Alexander the Great",
                era: "Ancient Greece",
                location: "ancient_greece",
                health: 110,
                attack: 19,
                defense: 11,
                skill: "Tactical Strike",
                description: "Conqueror of the known world",
                recruited: false,
                level: 1,
                experience: 0
            },
            sun_tzu: {
                name: "Sun Tzu",
                era: "Ancient China",
                location: "ancient_china",
                health: 80,
                attack: 14,
                defense: 16,
                skill: "Art of War",
                description: "Master strategist and philosopher",
                recruited: false,
                level: 1,
                experience: 0
            }
        };

        // Location Database
        const locations = {
            ancient_rome: {
                name: "Ancient Rome",
                description: "The mighty Colosseum echoes with battle cries",
                warriors: ["gladiator_maximus"],
                unlocked: true
            },
            feudal_japan: {
                name: "Feudal Japan",
                description: "Cherry blossoms fall on the battlefield",
                warriors: ["miyamoto_musashi"],
                unlocked: false
            },
            medieval_scotland: {
                name: "Medieval Scotland",
                description: "Highland mists conceal ancient warriors",
                warriors: ["william_wallace"],
                unlocked: false
            },
            medieval_france: {
                name: "Medieval France",
                description: "Sacred battlegrounds of a legendary maiden",
                warriors: ["joan_of_arc"],
                unlocked: false
            },
            ancient_greece: {
                name: "Ancient Greece",
                description: "Where legends were born and empires forged",
                warriors: ["alexander_great"],
                unlocked: false
            },
            ancient_china: {
                name: "Ancient China",
                description: "Land of strategy and ancient wisdom",
                warriors: ["sun_tzu"],
                unlocked: false
            }
        };

        // View Management
        function showView(viewName) {
            document.querySelectorAll('.view').forEach(view => {
                view.classList.remove('active');
            });
            document.getElementById(viewName + 'View').classList.add('active');
            gameState.currentView = viewName;
            
            switch(viewName) {
                case 'world':
                    renderWorldMap();
                    break;
                case 'team':
                    renderTeam();
                    break;
                case 'training':
                    renderTraining();
                    break;
            }
        }

        // World Map Rendering
        function renderWorldMap() {
            const worldMap = document.getElementById('worldMap');
            worldMap.innerHTML = '';
            
            Object.entries(locations).forEach(([id, location]) => {
                const locationDiv = document.createElement('div');
                locationDiv.className = `location ${location.unlocked ? '' : 'locked'}`;
                locationDiv.innerHTML = `
                    <h4>${location.name}</h4>
                    <p>${location.description}</p>
                    <small>${location.warriors.length} warrior(s)</small>
                `;
                
                if (location.unlocked) {
                    locationDiv.onclick = () => enterLocation(id);
                } else {
                    locationDiv.style.opacity = '0.5';
                    locationDiv.style.cursor = 'not-allowed';
                }
                
                worldMap.appendChild(locationDiv);
            });
        }

        // Enter Location and Show Warriors
        function enterLocation(locationId) {
            const location = locations[locationId];
            const warriors = location.warriors.map(id => warriorDatabase[id]);
            
            // Show available warriors in this location
            renderAvailableWarriors(warriors, locationId);
        }

        // Battle System
        function startBattle(warriorId) {
            const warrior = warriorDatabase[warriorId];
            gameState.currentBattle = {
                enemy: {...warrior},
                playerHealth: gameState.player.maxHealth,
                enemyHealth: warrior.health,
                turn: 'player'
            };
            
            showView('battle');
            renderBattle();
        }

        function renderBattle() {
            const battle = gameState.currentBattle;
            document.getElementById('battleTitle').textContent = `Battle: ${battle.enemy.name}`;
            document.getElementById('playerName').textContent = 'You';
            document.getElementById('enemyName').textContent = battle.enemy.name;
            
            updateHealthBars();
            updateBattleStats();
        }

        function updateHealthBars() {
            const battle = gameState.currentBattle;
            const playerHealthPercent = (battle.playerHealth / gameState.player.maxHealth) * 100;
            const enemyHealthPercent = (battle.enemyHealth / battle.enemy.health) * 100;
            
            document.getElementById('playerHealth').style.width = playerHealthPercent + '%';
            document.getElementById('enemyHealth').style.width = enemyHealthPercent + '%';
        }

        function updateBattleStats() {
            document.getElementById('playerStats').innerHTML = `
                ATK: ${gameState.player.attack} | DEF: ${gameState.player.defense}
            `;
            document.getElementById('enemyStats').innerHTML = `
                ATK: ${gameState.currentBattle.enemy.attack} | DEF: ${gameState.currentBattle.enemy.defense}
            `;
        }

        function attack() {
            if (gameState.currentBattle.turn !== 'player') return;
            
            const damage = Math.max(1, gameState.player.attack - gameState.currentBattle.enemy.defense + Math.floor(Math.random() * 10) - 5);
            gameState.currentBattle.enemyHealth -= damage;
            
            logBattle(`You deal ${damage} damage!`);
            
            if (gameState.currentBattle.enemyHealth <= 0) {
                winBattle();
                return;
            }
            
            enemyTurn();
        }

        function defend() {
            if (gameState.currentBattle.turn !== 'player') return;
            
            logBattle('You brace for the enemy attack!');
            gameState.currentBattle.defending = true;
            enemyTurn();
        }

        function useSkill() {
            if (gameState.currentBattle.turn !== 'player') return;
            
            const skillDamage = gameState.player.attack * 1.5;
            const damage = Math.max(1, skillDamage - gameState.currentBattle.enemy.defense);
            gameState.currentBattle.enemyHealth -= damage;
            
            logBattle(`You use your special skill for ${damage} damage!`);
            
            if (gameState.currentBattle.enemyHealth <= 0) {
                winBattle();
                return;
            }
            
            enemyTurn();
        }

        function enemyTurn() {
            gameState.currentBattle.turn = 'enemy';
            
            setTimeout(() => {
                const enemyDamage = Math.max(1, gameState.currentBattle.enemy.attack - gameState.player.defense + Math.floor(Math.random() * 8) - 4);
                const actualDamage = gameState.currentBattle.defending ? Math.floor(enemyDamage / 2) : enemyDamage;
                
                gameState.currentBattle.playerHealth -= actualDamage;
                logBattle(`${gameState.currentBattle.enemy.name} deals ${actualDamage} damage!`);
                
                gameState.currentBattle.defending = false;
                
                if (gameState.currentBattle.playerHealth <= 0) {
                    loseBattle();
                    return;
                }
                
                gameState.currentBattle.turn = 'player';
                updateHealthBars();
            }, 1500);
        }

        function winBattle() {
            const enemy = gameState.currentBattle.enemy;
            logBattle(`Victory! ${enemy.name} has been defeated and joins your team!`);
            
            // Recruit the warrior
            warriorDatabase[Object.keys(warriorDatabase).find(key => warriorDatabase[key].name === enemy.name)].recruited = true;
            gameState.team.push(enemy);
            
            // Reward gold and experience
            gameState.player.gold += 50;
            gameState.player.experience += 25;
            
            // Unlock next location (simplified)
            unlockNextLocation();
            
            document.getElementById('returnBtn').style.display = 'block';
            updateUI();
        }

        function loseBattle() {
            logBattle('Defeat! You have been bested in combat.');
            gameState.currentBattle.playerHealth = gameState.player.maxHealth; // Restore health
            document.getElementById('returnBtn').style.display = 'block';
        }

        function unlockNextLocation() {
            const locationKeys = Object.keys(locations);
            const currentIndex = locationKeys.findIndex(key => locations[key].unlocked);
            if (currentIndex < locationKeys.length - 1) {
                locations[locationKeys[currentIndex + 1]].unlocked = true;
            }
        }

        function logBattle(message) {
            const log = document.getElementById('battleLog');
            log.innerHTML += message + '<br>';
            log.scrollTop = log.scrollHeight;
        }

        // Team Management
        function renderTeam() {
            const roster = document.getElementById('teamRoster');
            roster.innerHTML = '';
            
            if (gameState.team.length === 0) {
                roster.innerHTML = '<p>No warriors recruited yet. Defeat warriors in battle to recruit them!</p>';
                return;
            }
            
            gameState.team.forEach((warrior, index) => {
                const warriorDiv = document.createElement('div');
                warriorDiv.className = 'warrior-card recruited';
                warriorDiv.innerHTML = `
                    <h4>${warrior.name}</h4>
                    <p>${warrior.description}</p>
                    <div class="stat-bar">
                        <span>Level: ${warrior.level}</span>
                        <span>HP: ${warrior.health}</span>
                    </div>
                    <div class="stat-bar">
                        <span>ATK: ${warrior.attack}</span>
                        <span>DEF: ${warrior.defense}</span>
                    </div>
                    <small>Skill: ${warrior.skill}</small>
                `;
                roster.appendChild(warriorDiv);
            });
        }

        // Training System
        function renderTraining() {
            const trainingArea = document.getElementById('trainingInterface');
            
            if (gameState.team.length === 0) {
                trainingArea.innerHTML = '<p>No warriors to train. Recruit warriors first!</p>';
                return;
            }
            
            trainingArea.innerHTML = `
                <select id="trainingWarrior">
                    <option value="">Select a warrior...</option>
                    ${gameState.team.map(warrior => 
                        `<option value="${warrior.name}">${warrior.name} (Lv.${warrior.level})</option>`
                    ).join('')}
                </select>
                <div id="trainingOptions" style="margin-top: 15px;"></div>
            `;
            
            document.getElementById('trainingWarrior').onchange = showTrainingOptions;
        }

        function showTrainingOptions() {
            const selectedName = document.getElementById('trainingWarrior').value;
            const options = document.getElementById('trainingOptions');
            
            if (!selectedName) {
                options.innerHTML = '';
                return;
            }
            
            options.innerHTML = `
                <div class="action-buttons">
                    <button class="btn" onclick="trainStat('attack')" ${gameState.player.gold < 30 ? 'disabled' : ''}>
                        Train Attack (30 gold)
                    </button>
                    <button class="btn" onclick="trainStat('defense')" ${gameState.player.gold < 30 ? 'disabled' : ''}>
                        Train Defense (30 gold)
                    </button>
                    <button class="btn" onclick="trainStat('health')" ${gameState.player.gold < 25 ? 'disabled' : ''}>
                        Train Health (25 gold)
                    </button>
                </div>
            `;
        }

        function trainStat(stat) {
            const selectedName = document.getElementById('trainingWarrior').value;
            const warrior = gameState.team.find(w => w.name === selectedName);
            
            if (!warrior) return;
            
            const costs = { attack: 30, defense: 30, health: 25 };
            const cost = costs[stat];
            
            if (gameState.player.gold < cost) return;
            
            gameState.player.gold -= cost;
            
            switch(stat) {
                case 'attack':
                    warrior.attack += 2;
                    break;
                case 'defense':
                    warrior.defense += 2;
                    break;
                case 'health':
                    warrior.health += 10;
                    break;
            }
            
            updateUI();
            renderTraining();
        }

        // Available Warriors Sidebar
        function renderAvailableWarriors(warriors = null, locationId = null) {
            const container = document.getElementById('availableWarriors');
            container.innerHTML = '';
            
            const warriorsToShow = warriors || Object.values(warriorDatabase).filter(w => 
                gameState.unlockedLocations.includes(w.location)
            );
            
            warriorsToShow.forEach(warrior => {
                const warriorDiv = document.createElement('div');
                warriorDiv.className = `warrior-card ${warrior.recruited ? 'recruited' : ''}`;
                warriorDiv.innerHTML = `
                    <h4>${warrior.name}</h4>
                    <p>${warrior.era}</p>
                    <div class="stat-bar">
                        <span>HP: ${warrior.health}</span>
                        <span>ATK: ${warrior.attack}</span>
                    </div>
                    <small>${warrior.recruited ? 'Recruited' : 'Available'}</small>
                `;
                
                if (!warrior.recruited) {
                    warriorDiv.onclick = () => {
                        const warriorId = Object.keys(warriorDatabase).find(key => 
                            warriorDatabase[key].name === warrior.name
                        );
                        startBattle(warriorId);
                    };
                }
                
                container.appendChild(warriorDiv);
            });
        }

        // UI Updates
        function updateUI() {
            document.getElementById('playerLevel').textContent = gameState.player.level;
            document.getElementById('playerGold').textContent = gameState.player.gold;
            document.getElementById('teamSize').textContent = `${gameState.team.length}/6`;
        }

        // Initialize Game
        function initGame() {
            updateUI();
            renderWorldMap();
            renderAvailableWarriors();
            showView('world');
        }

        // Start the game
        initGame();
    </script>
</body>
</html>
